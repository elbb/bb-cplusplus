resource_types:
  - name: email
    type: docker-image
    source:
      repository: pcfseceng/email-resource
      username: ((registry_user))
      password: ((registry_password))
      tag: 1.0.19

resources:
  - name: source
    type: git
    source:
      uri: ((git_source))
      private_key: ((privatekey))
      branch: ((git_branch))
      skip_ssl_verification: ((git_skip_ssl_verification))

  - name: image-bb-gitversion-tool
    type: docker-image
    source:
      repository: elbb/bb-gitversion
      username: ((registry_user))
      password: ((registry_password))
      tag: ((bb_gitversion_version))

  - name: image-((bb_name))-builder
    type: docker-image
    source:
      repository: ((bb_docker_namespace))/((bb_name))-builder
      username: ((registry_user))
      password: ((registry_password))
      insecure_registries: ((bb_insecure_registries))
      tag: ((bb_builder_version))

  - name: image-((bb_name))-runtime-x86_64
    type: docker-image
    source:
      repository: ((bb_docker_namespace))/((bb_name))-runtime-x86_64
      username: ((registry_user))
      password: ((registry_password))
      insecure_registries: ((bb_insecure_registries))
      tag: ((bb_runtime_version))

  - name: send-an-email
    type: email
    source:
      smtp:
        host: ((email_smtp_host_url))
        port: ((email_smtp_port))
        anonymous: ((email_smtp_anonymous))
        username: ((email_smtp_user))
        password: ((email_smtp_pw))
        skip_ssl_validation: ((email_smtp_skip_ssl_validation))
        ca_cert: ((email_smtp_ca_cert))
        host_origin: ((email_smtp_host_origin))
        login_auth: ((email_smtp_login_auth))
      from:  ((email_from))
      to: ((email_to))

jobs:

  - name: build-and-deploy-((bb_name))
    public: true
    on_success:
      put: send-an-email
      params:
        subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} successfully finished"
        body_text: |
          Yeah!
          Build ID: "${BUILD_ID}"
          Build Name: "${BUILD_NAME}"
          Build Job Name: "${BUILD_JOB_NAME}"
          Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
          ATC External URL: "${ATC_EXTERNAL_URL}"
    on_failure:
      put: send-an-email
      params:
        subject_text: "ci ${BUILD_PIPELINE_NAME}: build ${BUILD_ID} failed!"
        body_text: |
          Oh no!
          Build ID: "${BUILD_ID}"
          Build Name: "${BUILD_NAME}"
          Build Job Name: "${BUILD_JOB_NAME}"
          Build Pipeline Name: "${BUILD_PIPELINE_NAME}"
          ATC External URL: "${ATC_EXTERNAL_URL}"

    plan:
      - in_parallel:
          - get: image-((bb_name))-builder
          - get: image-((bb_name))-runtime-x86_64
          - get: source
            trigger: true
          - get: image-bb-gitversion-tool

      - task: generate-version
        image: image-bb-gitversion-tool
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: gitversion
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                entrypoint.sh
          params:
            GIT_PATH: source
            GEN_PATH: gitversion
            GIT_BRANCH: "((git_branch))"
            DEFAULT_BRANCH: "((default_branch))"
            VERBOSE: 1

      - in_parallel:
        - task: build-cplusplus_service-x86_64
          image: image-((bb_name))-builder
          config:
            platform: linux
            inputs:
              - name: source
              - name: gitversion
            outputs:
              - name: install-((bb_name))-x86_64
              - name: analyze
              - name: build
            run:
              path: /bin/bash
              args:
                - -exc
                - |
                  chmod a+w . && chmod a+w analyze && chmod a+w build && chmod a+w ${INSTALL_DIR};
                  /usr/local/bin/entrypoint.sh source/service/service.build.sh \
                  && cp ${BUILD_DIR}/compile_commands.json ./analyze/
            params:
              ARCH: "x86_64"
              BB_GITVERSION_INCLUDE_DIR: "gitversion/cpp"
              BUILD_DIR: "build"
              CMAKE_BUILD_TYPE: "Release"
              CONAN_LOGIN_USERNAME: "((conan_user))"
              CONAN_PASSWORD: "((conan_password))"
              CONAN_REMOTE: "((conan_remote))"
              CONAN_USER_HOME: "build"
              CONAN_SSL_VERIFICATION: "((conan_ssl_verification))"
              INSTALL_DIR: "install-((bb_name))-x86_64"
              SOURCE_DIR: "source/service"

        - task: build-cplusplus_service-aarch64
          image: image-((bb_name))-builder
          config:
            platform: linux
            inputs:
              - name: source
              - name: gitversion
            outputs:
              - name: install-((bb_name))-aarch64
            run:
              path: /bin/bash
              args:
                - -exc
                - |
                  chmod a+w . && chmod a+w ${INSTALL_DIR};
                  /usr/local/bin/entrypoint.sh source/service/service.build.sh
            params:
              ARCH: "aarch64"
              BB_GITVERSION_INCLUDE_DIR: "gitversion/cpp"
              BUILD_DIR: "build"
              CMAKE_BUILD_TYPE: "Release"
              CONAN_LOGIN_USERNAME: "((conan_user))"
              CONAN_PASSWORD: "((conan_password))"
              CONAN_REMOTE: "((conan_remote))"
              CONAN_USER_HOME: "build"
              CONAN_SSL_VERIFICATION: "((conan_ssl_verification))"
              INSTALL_DIR: "install-((bb_name))-aarch64"
              SOURCE_DIR: "source/service"

        - task: build-cplusplus_service-armv7hf
          image: image-((bb_name))-builder
          config:
            platform: linux
            inputs:
              - name: source
              - name: gitversion
            outputs:
              - name: install-((bb_name))-armv7hf
            run:
              path: /bin/bash
              args:
                - -exc
                - |
                  chmod a+w . && chmod a+w ${INSTALL_DIR};
                  /usr/local/bin/entrypoint.sh source/service/service.build.sh
            params:
              ARCH: "armv7hf"
              BB_GITVERSION_INCLUDE_DIR: "gitversion/cpp"
              BUILD_DIR: "build"
              CMAKE_BUILD_TYPE: "Release"
              CONAN_LOGIN_USERNAME: "((conan_user))"
              CONAN_PASSWORD: "((conan_password))"
              CONAN_REMOTE: "((conan_remote))"
              CONAN_USER_HOME: "build"
              CONAN_SSL_VERIFICATION: "((conan_ssl_verification))"
              INSTALL_DIR: "install-((bb_name))-armv7hf"
              SOURCE_DIR: "source/service"

      - in_parallel:
        - task: unittest
          image: image-((bb_name))-runtime-x86_64
          config:
            platform: linux
            inputs:
              - name: install-((bb_name))-x86_64
            run:
              path: /bin/bash
              args:
                - -exc
                - |
                  env;
                  cd install-${BB_NAME}-x86_64 \
                  && ./cplusplus_service_unit_test
            params:
              BB_NAME: "((bb_name))"

        - task: analyze
          image: image-((bb_name))-builder
          config:
            platform: linux
            inputs:
              - name: analyze
              - name: build
              - name: source
              - name: gitversion
            run:
              path: /bin/bash
              args:
                - -exc
                - |
                  sed -i "s@/tmp/build/[^/]*/@$(pwd)/@g" analyze/compile_commands.json
                  cd analyze \
                  && CodeChecker analyze compile_commands.json -o reports/ \
                  && CodeChecker store reports/ --name "${BB_NAME}" --url ${CODECHECKER_URL}
            params:
              BB_NAME: ((bb_name))
              CODECHECKER_URL: ((codechecker_url))

        - task: doxygen
          image: image-((bb_name))-builder
          config:
            platform: linux
            inputs:
              - name: source
            run:
              path: /bin/bash
              args:
                - -exc
                - |
                  mkdir source/build; \
                  cd source/service/doxygen; \
                  doxygen Doxyfile;
